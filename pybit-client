#!/usr/bin/python

# -*- coding: utf-8 -*-
from amqplib import client_0_8 as amqp
from optparse import OptionParser
import tty
import sys
import signal
import jsonpickle
import requests
import pybit
import os
import time
from pybitclient import PyBITClient
from pybitclient.debian import DebianBuildClient
from pybitclient.subversion import SubversionClient
from pybit.models import AMQPConnection




META = "PYBIT_CLIENT_"


#register the single handler
def signal_handler(signal, frame):
	try:
		print '\nClosing %s' % os.path.basename(__file__)
		os._exit (os.EX_OK)
	except Exception as e:
		raise Exception('Error in signal handler: ' + str(e))
		return

try:
	signal.signal(signal.SIGINT, signal_handler)
	signal.signal(signal.SIGTERM, signal_handler)
	print "Hit Ctrl-C to quit."
except Exception as e:
	raise Exception('Error configuring signal handler: ' + str(e))


if __name__ == '__main__':
	parser = OptionParser()

	parser.add_option("--arch", dest="arch", default="i386",
		help="Architecture to use, defaults to i386", metavar= META + "ARCH")
	parser.add_option("--distribution", dest="distribution",
		default="Debian", help="Distribution to use, defaults to Debian",
		metavar= META +"DIST")
	parser.add_option("--pkg_format", dest="pkg_format", default="deb",
		help="Package type to use, defaults to deb", metavar= META +"FORMAT")
	parser.add_option("--suite", dest="suite", default="development",
		help="Suite to use, defaults to development", metavar= META +"SUITE")
	parser.add_option("--host", dest="host", default="localhost",
		help="host to connect to, defaults to localhost.", metavar=META + "HOST")
	parser.add_option("--vhost", dest="vhost", default="/",
		help="vhost to connect to, defaults to localhost.", metavar=META + "VHOST")
	parser.add_option("--userid", dest="userid", default="guest",
		help="user id to use for AMQP server, defaults to guest.", metavar=META + "USERID")
	parser.add_option("--port", dest="port", default="5672",
		help="port to use for AMQP server, defaults to 5672", metavar=META + "PORT")
	parser.add_option("--password", dest="password", default="guest",
		help="password to use for AMQP server, defaults to guest", metavar=META + "PASSWORD")
	parser.add_option("--insist", dest="insist", default=False,
		help="insist to use for AMQP server, defaults to 5672", metavar=META + "INSIST")
	parser.add_option("--clientid", dest="clientid", default=1,
		help="id to use for build-client control queue, defaults to 1 but is unique per amqp server.", metavar=META + "INSIST")

	
	(options, args) = parser.parse_args()
	
	conn_info = AMQPConnection(pybit.get_client_queue(options.clientid),
				options.host, options.userid, options.password, options.vhost)
	

#	try:
	with PyBITClient(options.arch, options.distribution, options.pkg_format, options.suite, conn_info) as build_client:
		while True:
			if build_client is not None:
				build_client.wait()
			else:
				os._exit (os.EX_OSERR)
	# drop registration
	
#	except Exception as e:
#		raise e
