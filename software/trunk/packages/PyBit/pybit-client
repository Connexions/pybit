#!/usr/bin/python

# -*- coding: utf-8 -*-
#
#       pybit-client
#
#       Copyright 2012 Neil Williams <codehelp@debian.org>
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

from amqplib import client_0_8 as amqp
import re
import json
import os.path
import time
import pybitclient
from pybitclient.debian import DebianBuildClient
from pybitclient.subversion import SubversionClient

supported_distributions = [ "debian" ]
supported_formats = [ "deb" ]

if os.path.isfile ("client.conf"):
	options = pybitclient.get_settings("./client.conf")
else :
	options = pybitclient.get_settings("/etc/pybit/client/client.conf")

host_arch = options["host_arch"] # i386
use_lvm = options["use_lvm"] # true
# FIXME: role is part of the Job.
role = options["role"] # master - builds Architecture: all packages.
buildroot = options["buildroot"]
host_opt = options["host"]
port_opt = options["port"]
userid_opt = options["userid"]
pass_opt = options["password"]
vhost_opt = options["virtual_host"]
insist_opt = True if options["insist"] == "True" else False
addr_opt = host_opt + ":" + port_opt
dput_opt = options["dput"]
buildd_id = options["idstring"]

# PyBit setup variables - package content
queue_name = "rabbit"
report_name = "controller"
listening_name = "buildd"
dput_cfg = "/etc/pybit/client/dput.cf"

# variables to retrieve from the job object later
dput_dest = "tcl"

conn = amqp.Connection(host=addr_opt, userid=userid_opt, password=pass_opt, virtual_host=vhost_opt, insist=insist_opt)
chan = conn.channel()
chan.queue_declare(queue=queue_name, durable=True, exclusive=False, auto_delete=False)
chan.exchange_declare(exchange=host_arch, type="direct", durable=True, auto_delete=False,)
chan.queue_bind(queue=queue_name, exchange=host_arch, routing_key=listening_name)

def recv_callback(msg):
	pkg = deb_package (msg.body)
	if not pkg:
		print "E: Misconfiguration - could not parse message."
		return
	if not supported_formats[pkg.format]:
		print "E: Misconfiguration - format is not for us."
		return
	if not supported_distributions[pkg.distribution]:
		print "E: Misconfiguration - distribution is not for us."
		return
	if not buildd_id or buildd_id == "default":
		print "E: Misconfiguration - refusing to build with a default or empty idstring."
		return
	if pkg.format == "deb" and pkg.distribution.lower() == "debian":
		client = DebianBuildClient ()
	else:
		print "W: shouldn't get here"
		return
	if not dput_dest or dput_dest == "":
		print "E: Misconfiguration - refusing to upload to default dput destination (Debian ftpmaster)."
		return
	if pkg.method_type == "svn":
		vcs = SubversionClient ()
	else :
		print "%s method not supported." % (pkg.method_type)
		return
	vcs.fetch_source()
	srcdir = vcs.get_srcdir()
	builddir = "%s/tmpbuilds/%s" % (buildroot, pkg.suite)
	# FIXME: use same naming convention in schroot setup whether lvm is used or not.
	if use_lvm :
		name = pkg.suite + "-source"
	else:
		name = pkg.suite
	client.update_environment ()
	# May need more sanity checking here
	pkg.architecture = host_arch
	pkg.buildd = buildd_id
	pkg.msgtype = "building"
	send_message (chan, pkg, report_name)
	if role == "master" :
		client.build_master (srcdir, pkg)
	elif role == "slave":
		client.build_slave (srcdir, pkg)

while True:
	chan.wait()

chan.close()
conn.close()
