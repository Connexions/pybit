#!/usr/bin/python

# -*- coding: utf-8 -*-
from amqplib import client_0_8 as amqp
from optparse import OptionParser
import tty
import sys
import signal
import jsonpickle
import requests
import pybit
import os
import time 

from pybit.models import PackageInstance, ClientMessage, BuildRequest
from pybitclient.debian import DebianBuildClient
from pybitclient.subversion import SubversionClient
from pybitclient.buildclient import PyBITClient

META = "PYBIT_CLIENT_"


#register the single handler
def signal_handler(signal, frame):
	try:
		print '\nClosing %s' % os.path.basename(__file__)
		os._exit (os.EX_OK)
	except Exception as e:
		raise Exception('Error in signal handler: ' + str(e))
		return
		
try:
	signal.signal(signal.SIGINT, signal_handler)
	print "Hit Ctrl-C to quit."
except Exception as e:
	raise Exception('Error configuring signal handler: ' + str(e))


if __name__ == '__main__':
	parser = OptionParser()
	
	parser.add_option("--arch", dest="arch", default="i386",
		help="Architecture to use, defaults to i386", metavar= META + "ARCH")
	parser.add_option("--distribution", dest="distribution", 
		default="Debian", help="Distribution to use, defaults to Debian",
		metavar= META +"DIST")
	parser.add_option("--format", dest="format", default="deb",
		help="Package type to use, defaults to deb", metavar= META +"FORMAT")
	parser.add_option("--suite", dest="suite", default="development",
		help="Suite to use, defaults to development", metavar= META +"SUITE")
	parser.add_option("--host", dest="host", default="localhost",
		help="vhost to connect to, defaults to localhost.", metavar=META + "HOST")
	parser.add_option("--vhost", dest="vhost", default="/",
		help="vhost to connect to, defaults to localhost.", metavar=META + "VHOST")
	parser.add_option("--userid", dest="userid", default="guest",
		help="user id to use for AMQP server, defaults to guest.", metavar=META + "USERID")
	parser.add_option("--port", dest="port", default="5672",
		help="port to use for AMQP server, defaults to 5672", metavar=META + "PORT")
	parser.add_option("--password", dest="password", default="guest",
		help="password to use for AMQP server, defaults to guest", metavar=META + "PASSWORD")
	parser.add_option("--insist", dest="insist", default=False,
		help="insist to use for AMQP server, defaults to 5672", metavar=META + "INSIST")
	parser.add_option("--id", dest="id", default=1,
		help="id to use for build-client control queue, defaults to 1 but is unique per amqp server.", metavar=META + "INSIST")
	parser.add_option("--interactive", dest="interactive", default=True,
		help="Run the basic client in interactive mode.", metavar=META + "INTERACTIVE")
	
	(options, args) = parser.parse_args()
	build_client = PyBITClient(options.arch, options.distribution, 
		options.format, options.suite, options.host, options.vhost,
		options.userid, options.port, options.password, options.insist,
		options.id, options.interactive)
	def recv_callback(msg):
		build_req = jsonpickle.decode(msg.body)
		if not isinstance(build_req, BuildRequest) :
			build_client.chan.basic_recover(True)
			return
		build_client.msg_handler(msg, build_req)
		cmd_req = None
		while (build_client.is_building()) :
			time.sleep(1)
			cmd_req = build_client.chan.basic_get(build_client.client_queue_name)
			if (cmd_req is not None and isinstance(cmd_req, CommandRequest)):
				build_client.control_handler(msg, cmd_req)


	try:
		build_client.chan.basic_consume(queue=build_client.queue_name, no_ack=False, callback=recv_callback, consumer_tag="build_callback")
		while True:
			build_client.chan.wait()
		# drop registration
		build_client.chan.basic_cancel("build_callback")
		build_client.chan.close()
		build_client.conn.close()
	except Exception as e:
		raise e
